#lang scheme
(define (square x) (* x x))
(define (sum-of-squares x y)
  (+ (square x) (square y)))
(define (f a)
  (sum-of-squares (+ a 1) (* a 2)))
(define (abs x)
  (cond ((> x 0) x)
        ((= x 0) 0)
        ((< x 0) (- x))))
#Exercise 1.3
(define (sum-of-largest-two x y z)
  (cond ((> x y z)
         (if (> y z)
             (sum-of-squares x y)
             (sum-of-squares x z)))
        ((> y x z)
         (if (> x z)
             (sum-of-squares y x)
             (sum-of-squares y z)))
        ((> z x y)
         (if (> x y)
             (sum-of-squares z x)
             (sum-of-squares z y)))))